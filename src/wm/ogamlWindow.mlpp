module Button = struct
  #include "button.mli"
end

module Keycode = struct
  #include "keycode.mli"
end

module Event = struct
  #include "event.ml"
end

module InternalWindow = struct
  #ifdef __LINUX__
    #include "window_impl_x11.ml"
  #elif defined __OSX__
    #include "window_impl_cocoa.ml"
  #endif
end

module InternalMouse = struct
  #ifdef __LINUX__
    #include "mouse_impl_x11.ml"
  #elif defined __OSX__
    #include "mouse_impl_cocoa.ml"
  #endif
end

module Window = struct

  exception Missing_uniform of string

  exception Invalid_uniform of string

  type t = {state : OgamlGL.State.t; internal : InternalWindow.t}

  let create ~width ~height = 
    let internal = InternalWindow.create ~width ~height in
    {
      state = OgamlGL.State.create ();
      internal
    }

  let close   win = InternalWindow.close   win.internal

  let destroy win = InternalWindow.destroy win.internal

  let is_open win = InternalWindow.is_open win.internal

  let size    win = InternalWindow.size    win.internal

  let poll_event win = InternalWindow.poll_event win.internal

  let display win = InternalWindow.display win.internal

  let draw ~window ~vertices ~program ~uniform ~parameters =
    let open OgamlGL in
    let cull_mode = DrawParameter.culling parameters in
    if State.culling_mode window.state <> cull_mode then begin
      State.set_culling_mode window.state cull_mode;
      Internal.Pervasives.culling cull_mode
    end;
    let poly_mode = DrawParameter.polygon parameters in
    if State.polygon_mode window.state <> poly_mode then begin
      State.set_polygon_mode window.state poly_mode;
      Internal.Pervasives.polygon poly_mode
    end;
    Program.use window.state (Some program);
    Program.iter_uniforms program (fun unif -> Uniform.bind uniform unif);
    VertexArray.draw window.state vertices program

  let clear win ~color ~depth ~stencil = 
    OgamlGL.Internal.Pervasives.clear color depth stencil

end

module Mouse = struct

  let position () = InternalMouse.position ()

  let relative_position win = InternalMouse.relative_position win.Window.internal

  let set_position p = InternalMouse.set_position p 

  let set_relative_position win p = InternalMouse.set_relative_position win.Window.internal p

  let is_pressed but = InternalMouse.is_pressed but
  
end

module Keyboard = struct
  #ifdef __LINUX__
    #include "keyboard_impl_x11.ml"
  #elif defined __OSX__
    #include "keyboard_impl_cocoa.ml"
  #endif
end
